/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package teamway.shenzhen.tms9000;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-04")
public class Computer implements org.apache.thrift.TBase<Computer, Computer._Fields>, java.io.Serializable, Cloneable, Comparable<Computer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Computer");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("CPU", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField MENMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("menmory", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DISK_FIELD_DESC = new org.apache.thrift.protocol.TField("disk", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField NET_FIELD_DESC = new org.apache.thrift.protocol.TField("net", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputerStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputerTupleSchemeFactory();

  public java.lang.String name; // required
  public double CPU; // required
  public double menmory; // required
  public double disk; // required
  public double net; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    CPU((short)2, "CPU"),
    MENMORY((short)3, "menmory"),
    DISK((short)4, "disk"),
    NET((short)5, "net");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // CPU
          return CPU;
        case 3: // MENMORY
          return MENMORY;
        case 4: // DISK
          return DISK;
        case 5: // NET
          return NET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPU_ISSET_ID = 0;
  private static final int __MENMORY_ISSET_ID = 1;
  private static final int __DISK_ISSET_ID = 2;
  private static final int __NET_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU, new org.apache.thrift.meta_data.FieldMetaData("CPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MENMORY, new org.apache.thrift.meta_data.FieldMetaData("menmory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISK, new org.apache.thrift.meta_data.FieldMetaData("disk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NET, new org.apache.thrift.meta_data.FieldMetaData("net", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Computer.class, metaDataMap);
  }

  public Computer() {
  }

  public Computer(
    java.lang.String name,
    double CPU,
    double menmory,
    double disk,
    double net)
  {
    this();
    this.name = name;
    this.CPU = CPU;
    setCPUIsSet(true);
    this.menmory = menmory;
    setMenmoryIsSet(true);
    this.disk = disk;
    setDiskIsSet(true);
    this.net = net;
    setNetIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Computer(Computer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.CPU = other.CPU;
    this.menmory = other.menmory;
    this.disk = other.disk;
    this.net = other.net;
  }

  public Computer deepCopy() {
    return new Computer(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setCPUIsSet(false);
    this.CPU = 0.0;
    setMenmoryIsSet(false);
    this.menmory = 0.0;
    setDiskIsSet(false);
    this.disk = 0.0;
    setNetIsSet(false);
    this.net = 0.0;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public Computer setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public double getCPU() {
    return this.CPU;
  }

  public Computer setCPU(double CPU) {
    this.CPU = CPU;
    setCPUIsSet(true);
    return this;
  }

  public void unsetCPU() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  /** Returns true if field CPU is set (has been assigned a value) and false otherwise */
  public boolean isSetCPU() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  public void setCPUIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_ISSET_ID, value);
  }

  public double getMenmory() {
    return this.menmory;
  }

  public Computer setMenmory(double menmory) {
    this.menmory = menmory;
    setMenmoryIsSet(true);
    return this;
  }

  public void unsetMenmory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MENMORY_ISSET_ID);
  }

  /** Returns true if field menmory is set (has been assigned a value) and false otherwise */
  public boolean isSetMenmory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MENMORY_ISSET_ID);
  }

  public void setMenmoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MENMORY_ISSET_ID, value);
  }

  public double getDisk() {
    return this.disk;
  }

  public Computer setDisk(double disk) {
    this.disk = disk;
    setDiskIsSet(true);
    return this;
  }

  public void unsetDisk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISK_ISSET_ID);
  }

  /** Returns true if field disk is set (has been assigned a value) and false otherwise */
  public boolean isSetDisk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISK_ISSET_ID);
  }

  public void setDiskIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISK_ISSET_ID, value);
  }

  public double getNet() {
    return this.net;
  }

  public Computer setNet(double net) {
    this.net = net;
    setNetIsSet(true);
    return this;
  }

  public void unsetNet() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NET_ISSET_ID);
  }

  /** Returns true if field net is set (has been assigned a value) and false otherwise */
  public boolean isSetNet() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NET_ISSET_ID);
  }

  public void setNetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case CPU:
      if (value == null) {
        unsetCPU();
      } else {
        setCPU((java.lang.Double)value);
      }
      break;

    case MENMORY:
      if (value == null) {
        unsetMenmory();
      } else {
        setMenmory((java.lang.Double)value);
      }
      break;

    case DISK:
      if (value == null) {
        unsetDisk();
      } else {
        setDisk((java.lang.Double)value);
      }
      break;

    case NET:
      if (value == null) {
        unsetNet();
      } else {
        setNet((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case CPU:
      return getCPU();

    case MENMORY:
      return getMenmory();

    case DISK:
      return getDisk();

    case NET:
      return getNet();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case CPU:
      return isSetCPU();
    case MENMORY:
      return isSetMenmory();
    case DISK:
      return isSetDisk();
    case NET:
      return isSetNet();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Computer)
      return this.equals((Computer)that);
    return false;
  }

  public boolean equals(Computer that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_CPU = true;
    boolean that_present_CPU = true;
    if (this_present_CPU || that_present_CPU) {
      if (!(this_present_CPU && that_present_CPU))
        return false;
      if (this.CPU != that.CPU)
        return false;
    }

    boolean this_present_menmory = true;
    boolean that_present_menmory = true;
    if (this_present_menmory || that_present_menmory) {
      if (!(this_present_menmory && that_present_menmory))
        return false;
      if (this.menmory != that.menmory)
        return false;
    }

    boolean this_present_disk = true;
    boolean that_present_disk = true;
    if (this_present_disk || that_present_disk) {
      if (!(this_present_disk && that_present_disk))
        return false;
      if (this.disk != that.disk)
        return false;
    }

    boolean this_present_net = true;
    boolean that_present_net = true;
    if (this_present_net || that_present_net) {
      if (!(this_present_net && that_present_net))
        return false;
      if (this.net != that.net)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(CPU);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(menmory);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(disk);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(net);

    return hashCode;
  }

  @Override
  public int compareTo(Computer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCPU()).compareTo(other.isSetCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CPU, other.CPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMenmory()).compareTo(other.isSetMenmory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenmory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menmory, other.menmory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisk()).compareTo(other.isSetDisk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disk, other.disk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNet()).compareTo(other.isSetNet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.net, other.net);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Computer(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CPU:");
    sb.append(this.CPU);
    first = false;
    if (!first) sb.append(", ");
    sb.append("menmory:");
    sb.append(this.menmory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("disk:");
    sb.append(this.disk);
    first = false;
    if (!first) sb.append(", ");
    sb.append("net:");
    sb.append(this.net);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComputerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ComputerStandardScheme getScheme() {
      return new ComputerStandardScheme();
    }
  }

  private static class ComputerStandardScheme extends org.apache.thrift.scheme.StandardScheme<Computer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Computer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.CPU = iprot.readDouble();
              struct.setCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MENMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.menmory = iprot.readDouble();
              struct.setMenmoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.disk = iprot.readDouble();
              struct.setDiskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NET
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.net = iprot.readDouble();
              struct.setNetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Computer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPU_FIELD_DESC);
      oprot.writeDouble(struct.CPU);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MENMORY_FIELD_DESC);
      oprot.writeDouble(struct.menmory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISK_FIELD_DESC);
      oprot.writeDouble(struct.disk);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NET_FIELD_DESC);
      oprot.writeDouble(struct.net);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComputerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ComputerTupleScheme getScheme() {
      return new ComputerTupleScheme();
    }
  }

  private static class ComputerTupleScheme extends org.apache.thrift.scheme.TupleScheme<Computer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Computer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetCPU()) {
        optionals.set(1);
      }
      if (struct.isSetMenmory()) {
        optionals.set(2);
      }
      if (struct.isSetDisk()) {
        optionals.set(3);
      }
      if (struct.isSetNet()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCPU()) {
        oprot.writeDouble(struct.CPU);
      }
      if (struct.isSetMenmory()) {
        oprot.writeDouble(struct.menmory);
      }
      if (struct.isSetDisk()) {
        oprot.writeDouble(struct.disk);
      }
      if (struct.isSetNet()) {
        oprot.writeDouble(struct.net);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Computer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.CPU = iprot.readDouble();
        struct.setCPUIsSet(true);
      }
      if (incoming.get(2)) {
        struct.menmory = iprot.readDouble();
        struct.setMenmoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.disk = iprot.readDouble();
        struct.setDiskIsSet(true);
      }
      if (incoming.get(4)) {
        struct.net = iprot.readDouble();
        struct.setNetIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

